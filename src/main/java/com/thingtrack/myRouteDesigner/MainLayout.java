package com.thingtrack.myRouteDesigner;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;

import org.vaadin.vol.Bounds;
import org.vaadin.vol.Control;
import org.vaadin.vol.GoogleSatelliteMapLayer;
import org.vaadin.vol.GoogleStreetMapLayer;
import org.vaadin.vol.Marker;
import org.vaadin.vol.MarkerLayer;
import org.vaadin.vol.OpenLayersMap;
import org.vaadin.vol.OpenStreetMapLayer;
import org.vaadin.vol.Point;
import org.vaadin.vol.PointVector;
import org.vaadin.vol.PolyLine;
import org.vaadin.vol.Style;
import org.vaadin.vol.StyleMap;
import org.vaadin.vol.Vector;
import org.vaadin.vol.VectorLayer;
import org.vaadin.vol.VectorLayer.DrawingMode;
import org.vaadin.vol.VectorLayer.SelectionMode;
import org.vaadin.vol.VectorLayer.VectorModifiedEvent;
import org.vaadin.vol.VectorLayer.VectorSelectedEvent;

import com.thingtrack.myRouteDesigner.mopel.Location;
import com.thingtrack.myRouteDesigner.mopel.MapCoordinates;
import com.thingtrack.myRouteDesigner.mopel.Route;
import com.thingtrack.myRouteDesigner.mopel.RoutePlannerException;
import com.thingtrack.myRouteDesigner.ui.MarkerLayout;
import com.thingtrack.myRouteDesigner.ui.MarkerLayout.MarkerAddListener;
import com.thingtrack.myRouteDesigner.ui.MarkerLayout.MarkerEvent;
import com.thingtrack.myRouteDesigner.ui.MarkerLayout.MarkerMoveListener;
import com.thingtrack.myRouteDesigner.ui.MarkerLayout.MarkerRemoveListener;
import com.thingtrack.myRouteDesigner.ui.MarkerPanel;
import com.thingtrack.myRouteDesigner.webservice.MapQuestOpenDirectionsService;
import com.thingtrack.myRouteDesigner.webservice.MapQuestOpenDirectionsService.RoutingOption;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.Action;
import com.vaadin.event.Action.Handler;
import com.vaadin.terminal.ExternalResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window.Notification;

@SuppressWarnings("serial")
public class MainLayout extends CustomComponent implements Handler {

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout mapLayout;
	@AutoGenerated
	private OpenLayersMap openLayersMap;
	@AutoGenerated
	private VerticalLayout routeLayout;
	@AutoGenerated
	private HorizontalLayout toolbarLayout;
	@AutoGenerated
	private Button btnCalculateRoute;
	@AutoGenerated
	private Button btnMapEdit;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private Button btnAddMarker;
	@AutoGenerated
	private Panel panelMarkerLayout;
	@AutoGenerated
	private VerticalLayout verticalLayoutMarkerLayout;
	@AutoGenerated
	private MarkerLayout markerLayout;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private GoogleSatelliteMapLayer googleSatelliteMapLayer;
	private GoogleStreetMapLayer googleStreetMapLayer;
	private OpenStreetMapLayer openStreetMapLayer;
	
	private final VectorLayer routeVectorLayer = new VectorLayer();
	private final VectorLayer stopsVectorLayer = new VectorLayer();
	private MarkerLayer stopsMakerLayer;
	
	private Route designedRoute;
	
	private List<MapCoordinates> routeCoordinates = new ArrayList<MapCoordinates>();
	
	private static final Action ACTION_ADD_STOP = new Action("Add Stop");
    private static final Action ACTION_REMOVE_STOP = new Action("Remove Stop");
    
    private static final Action[] ACTIONS = new Action[] { ACTION_ADD_STOP, ACTION_REMOVE_STOP };
    
    private Vector vectorSelected = null;
    
    private DrawingMode mapStatus = DrawingMode.NONE;
    
    public StyleMap STYLEMAP_STOP_MARKER;
    
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public MainLayout() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here	
		btnMapEdit.setStyleName(Button.STYLE_LINK);		
		btnMapEdit.addStyleName("NONE");
		btnMapEdit.setCaption("Read Mode");
		btnMapEdit.setHeight("30px");
				               	
		// initial center/zoom
        openLayersMap.setCenter(-5.639457, 43.534371);
        openLayersMap.setZoom(15);
                
		openLayersMap.addControl(Control.ScaleLine);
		
        openLayersMap.addActionHandler(this);     
		
        // define layers
    	openStreetMapLayer = new OpenStreetMapLayer();
		googleStreetMapLayer = new GoogleStreetMapLayer();
        googleSatelliteMapLayer = new GoogleSatelliteMapLayer();
                
        stopsVectorLayer.setSelectionMode(SelectionMode.SIMPLE);      
                
        // Set stroke color to green, otherwise like default style
        Style defaultStyle = new Style();
        defaultStyle.extendCoreStyle("default");
        defaultStyle.setStrokeColor("#00b963");

        // Make borders of selected graphs bigger
        Style selectStyle = new Style();
        selectStyle.setStrokeWidth(5);
        
        // make selectStyle inherit attributes not explicitly set
        StyleMap stylemap = new StyleMap(defaultStyle, selectStyle, null);
        stylemap.setExtendDefault(true);
        routeVectorLayer.setStyleMap(stylemap);
        
        stopsVectorLayer.addListener(new VectorLayer.VectorSelectedListener() {			
			@Override
			public void vectorSelected(VectorSelectedEvent event) {
				vectorSelected = event.getVector();
				
			}
		});
        
        stopsVectorLayer.addListener(new VectorLayer.VectorModifiedListener() {        	
            public void vectorModified(VectorModifiedEvent event) {
            	// get vector selected
            	Vector vector = event.getVector();
            	
            	// regenerate stops layer
            	regenerateMapCoordinatesCoordinates(vector);            	            		           
            	
            	refreshRoute();
            	
            }
        });
                
        // add layers to openlayers
        routeVectorLayer.setImmediate(true);
        stopsVectorLayer.setImmediate(true);        
        
        openLayersMap.addLayer(openStreetMapLayer);
        openLayersMap.addLayer(googleStreetMapLayer);
        openLayersMap.addLayer(googleSatelliteMapLayer);
        openLayersMap.addLayer(routeVectorLayer);
        openLayersMap.addLayer(stopsVectorLayer);
       
        btnMapEdit.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				if (mapStatus == DrawingMode.NONE) {										
					btnMapEdit.setCaption("Edit Mode");
					
					btnMapEdit.removeStyleName("NONE");
					btnMapEdit.addStyleName("MODIFY");
					
					mapStatus = DrawingMode.MODIFY;
					
				}
				else {
					btnMapEdit.setCaption("Read Mode");
					
					btnMapEdit.removeStyleName("MODIFY");
					btnMapEdit.addStyleName("NONE");
										
					mapStatus = DrawingMode.NONE;
				
				}
				
				stopsVectorLayer.setDrawingMode(mapStatus);
			}
		});
        
        btnCalculateRoute.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				refreshRoute();
				
			}
		});                           
        
        markerLayout.addListenerMarkerAdd(new MarkerAddListener() {			
			@Override
			public void markerAdd(MarkerEvent event) {
				refreshRoute();
				
			}
		});
        
        markerLayout.addListenerMarkerMove(new MarkerMoveListener() {			
			@Override
			public void markerMove(MarkerEvent event) {
				refreshRoute();		
			}
		});
        
        markerLayout.addListenerMarkerRemove(new MarkerRemoveListener() {			
			@Override
			public void markerRemove(MarkerEvent event) {
				refreshRoute();
				
			}
		});
        
        btnAddMarker.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				MarkerPanel markerPanel = new MarkerPanel(null, null);
				markerLayout.addComponent(markerPanel);
				markerLayout.setCollapsible(markerPanel, false);				
			}
		});
	}
	
	private void refreshRoute() {
		Iterator<Component> markerPanels = markerLayout.getMarkers();
		
		routeCoordinates.clear();
		stopsVectorLayer.removeAllComponents();
		while(markerPanels.hasNext()) {
			MarkerPanel markerPanel = (MarkerPanel)markerPanels.next();
			
			double lon = markerPanel.getVector().getPoints()[0].getLon();
			double lat = markerPanel.getVector().getPoints()[0].getLat();
			
			MapCoordinates mapCoordinates = new MapCoordinates(lat, lon);                                                                                                           
	  	    routeCoordinates.add(mapCoordinates);
	  	    
	  	    PointVector pointVector = new PointVector();
	  	    pointVector.setPoints(new Point(lon, lat));
	  	    pointVector.setData(mapCoordinates);
	  	    
	  	    markerPanel.setVector(pointVector);
	  	    
	  	    stopsVectorLayer.addVector(pointVector);
		}
					  			    							
        // recalculate the route
	    if (routeCoordinates.size() > 1)
	    	calculateRoute();
	}
	
	@Override
    public void attach() {    
        // make selectStyle inherit attributes not explicitly set
        Style defaultStopMapStyle = new Style();
        defaultStopMapStyle.setExternalGraphic(getApplication().getURL() + "VAADIN/themes/myRouteDesigner/markers/red-dot.png");
        defaultStopMapStyle.setGraphicHeight(32);
        defaultStopMapStyle.setGraphicWidth(32);
        defaultStopMapStyle.setFillOpacity(1);
        
        Style selectedStopMapStyle = new Style();
        selectedStopMapStyle.setExternalGraphic(getApplication().getURL() + "VAADIN/themes/myRouteDesigner/markers/blue-dot.png");
        selectedStopMapStyle.setGraphicHeight(32);
        selectedStopMapStyle.setGraphicWidth(32);
        selectedStopMapStyle.setFillOpacity(1);
        
        StyleMap stylemapStopLayer = new StyleMap(defaultStopMapStyle, selectedStopMapStyle, null);
        stylemapStopLayer.setExtendDefault(true);
        stopsVectorLayer.setStyleMap(stylemapStopLayer);

    }
	
	private void regenerateMapCoordinatesCoordinates(Vector vector) {		
		for (MapCoordinates mc : routeCoordinates) {
			if (mc.equals((MapCoordinates)vector.getData())) {
				mc.setLat(vector.getPoints()[0].getLat());
				mc.setLng(vector.getPoints()[0].getLon());
			}
		}
	}
	
	private void calculateRoute() {
		// MapQuest Web Service
		MapQuestOpenDirectionsService mapQuestOpenDirectionsService = MapQuestOpenDirectionsService.getInstance();

		// MapQuest Routing options
		createRouteOptions(mapQuestOpenDirectionsService);
		
		// Stop coordinates
		/*List<MapCoordinates> routeCoordinates = new ArrayList<MapCoordinates>();
		for (Stop stop : serviceDetailDto.getStops()){
			MapCoordinates mapCoordinates = new MapCoordinates(stop.getStopAddress().getLatitude(), stop.getStopAddress().getLongitude());
			routeCoordinates.add(mapCoordinates);
			
		}*/
		
		MapCoordinates[] routeCoordinatesArray = new MapCoordinates[routeCoordinates.size()];
		routeCoordinates.toArray(routeCoordinatesArray);

		try {
			// Calulating the route
			designedRoute = mapQuestOpenDirectionsService.getRoute(routeCoordinatesArray);

			// Show the summarized result
			//resultValueLabel.setValue(getEstimatedServiceResult(designedRoute));

			// Draw in the map
			drawRouteStroke(null, designedRoute);

			// Draw in the charts
			//calculatedRouteCharts_1.drawCharts(designedRoute);
			
			// Load maneuver table
			//loadManeuverTable(designedRoute);

			
		} catch (RoutePlannerException e) {
			getApplication().getMainWindow().showNotification("Hubo un error calculando la ruta", Notification.TYPE_ERROR_MESSAGE);
		}

	}
	
	private void createRouteOptions(MapQuestOpenDirectionsService mapQuestOpenDirectionsService) {
		// Clear old options
		mapQuestOpenDirectionsService.removeAllOptions();

		// Route type
		String routeType = null;
		/*if (Service.ROUTE_TYPE.FASTEST.toString().equals(serviceDetailDto.getRouteType()))
			routeType = "fastest";
		else if (Service.ROUTE_TYPE.SHORTEST.toString().equals(serviceDetailDto.getRouteType()))*/
			routeType = "shortest";

		mapQuestOpenDirectionsService.addRoutingOption(RoutingOption.ROUTE_TYPE, routeType);

		// Route avoids
		List<String> routeAvoidsList = new ArrayList<String>();

		/*for (char avoid : serviceDetailDto.getRouteAvoids().toCharArray()) {

			if (Service.ROUTE_AVOIDS.AVOID_COUNTRY_BORDERS.getValue() == avoid) {
				routeAvoidsList.add("Country+border+crossing");
				continue;
			}
			if (Service.ROUTE_AVOIDS.AVOID_FERRIES.getValue() == avoid) {
				routeAvoidsList.add("Ferry");
				continue;
			}
			if (Service.ROUTE_AVOIDS.AVOID_HIGHWAYS.getValue() == avoid) {
				routeAvoidsList.add("Limited+Access");
				continue;
			}
			if (Service.ROUTE_AVOIDS.AVOID_SEASONAL_ROADS.getValue() == avoid) {
				routeAvoidsList.add("Approximate+Seasonal+Closure");
				continue;
			}
			if (Service.ROUTE_AVOIDS.AVOID_TOLLS.getValue() == avoid) {
				routeAvoidsList.add("Toll+road");
				continue;
			}
			if (Service.ROUTE_AVOIDS.AVOID_UNPAVED.getValue() == avoid) {
				routeAvoidsList.add("Unpaved");
				continue;
			}

		}*/

		if (routeAvoidsList.size() > 0)
			mapQuestOpenDirectionsService.addRoutingOption(RoutingOption.AVOIDS, routeAvoidsList);

	}
	
	private void drawRouteStroke(Date routeStartDate, Route route) {

		List<Point> routePoints = new ArrayList<Point>();

		routeVectorLayer.removeAllComponents();
		for (MapCoordinates coordinates : route.getShape().getShapePoints())
			routePoints.add(new Point(coordinates.getLng(), coordinates.getLat()));

		PolyLine routePath = new PolyLine();
		
		Style routeStrokeStyle = new Style();
		routeStrokeStyle.setStrokeWidth(5);
		routeStrokeStyle.setStrokeColor("#7D26CD");
		routeStrokeStyle.setStrokeOpacity(0.5);
				        
		routePath.setCustomStyle(routeStrokeStyle);
		Point[] points = new Point[routePoints.size()];
		routePoints.toArray(points);
		routePath.setPoints(points);
		
		routeVectorLayer.addVector(routePath);

		// Create Stop Markers
		//createStopMarkers(routeStartDate, route);

		// Extend the map to the current route
		//Bounds bounds = new Bounds(points);
		//openLayersMap.zoomToExtent(bounds);
	}
	
	/**
     * An example how to zoom the map so that it covers given points.
     * 
     * @param map
     * @param points
     */
    private void zoomToExtent(OpenLayersMap map, Point[] points) {
        Bounds bounds = new Bounds(points);
        openLayersMap.zoomToExtent(bounds);
    }
    
    /**
     * An example how to restrict the displayed map so that it covers minimal
     * rectangular area that contains given points.
     * 
     * @param map
     * @param points
     */
    @SuppressWarnings("unused")
    private void setRestrictedExtent(OpenLayersMap map, Point[] points) {
        Bounds bounds = new Bounds(points);
        map.setRestrictedExtent(bounds);
        
    }

    private void createStopMarkers(Date startingRouteDate, Route route) {

		int stopAsciiCounter = 65;

		Calendar calendar = GregorianCalendar.getInstance();
		calendar.setTime(startingRouteDate != null ? startingRouteDate : new Date());

		List<Marker> createdMarkers = new ArrayList<Marker>();

		stopsMakerLayer.removeAllComponents();

		for (int i = 0; i < route.getLocations().size(); i++) {
			Location location = route.getLocations().get(i);

			// Create the marker
			Marker stopMarker = new Marker(location.getDisplayLatLng().getLng(), location.getDisplayLatLng().getLat());

			if (i == 0)
				stopMarker.setIcon(new ExternalResource("http://icons.mqcdn.com/icons/stop.png?text=" + new String(new char[] { (char) stopAsciiCounter }) + "&color=green1"), 22, 28);
			else if (i == route.getLocations().size() - 1)
				stopMarker.setIcon(new ExternalResource("http://icons.mqcdn.com/icons/stop.png?text=" + new String(new char[] { (char) stopAsciiCounter }) + "&color=red1"), 22, 28);
			else
				stopMarker.setIcon(new ExternalResource("http://icons.mqcdn.com/icons/stop.png?text=" + new String(new char[] { (char) stopAsciiCounter })), 22, 28);

			createdMarkers.add(stopMarker);

			stopsMakerLayer.addMarker(stopMarker);

			stopAsciiCounter++;

		}

		// Create Pop up markers
		createMarkerPopups(route, startingRouteDate, createdMarkers);

	}
    
    private void createMarkerPopups(Route route, Date startingRouteDate, List<Marker> markers) {

//		Calendar calendar = GregorianCalendar.getInstance();
//		calendar.setTime(startingRouteDate != null ? startingRouteDate : new Date());
//
//		List<CustomizedLocationTextField> customizedLocationTextFields = routeForm_1.getCustomizedLocationTextFields();
//
//		for (int i = 0; i < markers.size(); i++) {
//
//			Marker marker = markers.get(i);
//
//			final Popup markerPopup = new Popup();
//			markerPopup.setPopupStyle(PopupStyle.FRAMED_CLOUD);
//			markerPopup.setLon(marker.getLon());
//			markerPopup.setLat(marker.getLat());
//
//			VerticalLayout popupLayout = new VerticalLayout();
//			popupLayout.setMargin(true);
//			popupLayout.setSpacing(true);
//			popupLayout.setHeight("150px");
//			popupLayout.setWidth("250px");
//			markerPopup.addComponent(popupLayout);
//
//			markerPopup.setAnchor(marker);
//
//			Label addressStopLabel = new Label();
//			addressStopLabel.setStyleName(Reindeer.LABEL_H2);
//			addressStopLabel.setContentMode(Label.CONTENT_XHTML);
//			DateField arrivalStopDate = new DateField("LLegada");
//			arrivalStopDate.setResolution(DateField.RESOLUTION_MIN);
//			DateField checkoutStopDate = new DateField("Salida");
//			checkoutStopDate.setResolution(DateField.RESOLUTION_MIN);
//
//			popupLayout.addComponent(addressStopLabel);
//			popupLayout.addComponent(arrivalStopDate);
//			popupLayout.addComponent(checkoutStopDate);
//			popupLayout.setExpandRatio(checkoutStopDate, 1.0F);
//
//			Location location = route.getLocations().get(i);
//			addressStopLabel.setValue(getStopAddress(location));
//
//			if (i == 0) {
//
//				arrivalStopDate.setValue(calendar.getTime());
//				checkoutStopDate.setValue(calendar.getTime());
//
//				customizedLocationTextFields.get(i).setCheckoutStopDate(calendar.getTime());
//			}
//
//			else {
//				Leg leg = route.getLegs().get(i - 1);
//				calendar.add(Calendar.SECOND, leg.getTime());
//
//				arrivalStopDate.setValue(calendar.getTime());
//				checkoutStopDate.setValue(calendar.getTime());
//
//				if (markers.size() - i == 1)
//					customizedLocationTextFields.get(i).setArrivalStopDate(
//							calendar.getTime());
//
//				else
//					setStopDate(customizedLocationTextFields.get(i),
//							calendar.getTime());
//
//			}
//
//			marker.addClickListener(new ClickListener() {
//
//				@Override
//				public void click(com.vaadin.event.MouseEvents.ClickEvent event) {
//
//					routeOpenLayersMap.addPopup(markerPopup);
//				}
//			});
//		}

	}
    
	@Override
	public Action[] getActions(Object target, Object sender) {
		return ACTIONS;
		
	}

	@Override
	public void handleAction(Action action, Object sender, Object target) {
        if (action == ACTION_ADD_STOP) {
        	Point point = (Point) target;
            
        	PointVector pointVector = new PointVector();
            pointVector.setPoints(point);
            
            MapCoordinates mapCoordinates = new MapCoordinates(point.getLat(), point.getLon());                                                                                                           
	  	    routeCoordinates.add(mapCoordinates);
            
	  	    pointVector.setData(mapCoordinates);		    
		    stopsVectorLayer.addVector(pointVector);
		    
		    // add new marker Panel
		    double lon = Math.round(mapCoordinates.getLng() * 100000.0) / 100000.0;
		    double lat = Math.round(mapCoordinates.getLat() * 100000.0) / 100000.0;
		    
			MarkerPanel markerPanel = new MarkerPanel(lon, lat);
			markerPanel.setCaption("Marker [Lon: " + lon + ", Lat: " + lat + "]");
			markerPanel.setVector(pointVector);
			markerLayout.addComponent(markerPanel);
			markerLayout.setCollapsible(markerPanel, false);
			//addressPortalLayout.setIcon(new ThemeResource("../myRouteDesigner/icons/pin.png"));
			
            // recalculate the route
		    if (routeCoordinates.size() > 1)
		    	refreshRoute();
		    
        } else if (action == ACTION_REMOVE_STOP) {
        	Vector vector = stopsVectorLayer.getSelectedVector();
        	
        	if (vector == null)
        		return;
        	
        	stopsVectorLayer.removeComponent(vector);        	
        	routeCoordinates.remove(vector.getData());
        	
        	// remove from Marker Panel
        	MarkerPanel markerPanel = markerLayout.getMarkerPanel(vector);
        	if (markerPanel != null)
        		markerLayout.removeComponent(markerPanel);
        	
        	refreshRoute();
        }
		
	}
	
	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// routeLayout
		routeLayout = buildRouteLayout();
		mainLayout.addComponent(routeLayout);
		
		// mapLayout
		mapLayout = buildMapLayout();
		mainLayout.addComponent(mapLayout);
		mainLayout.setExpandRatio(mapLayout, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildRouteLayout() {
		// common part: create layout
		routeLayout = new VerticalLayout();
		routeLayout.setImmediate(false);
		routeLayout.setWidth("350px");
		routeLayout.setHeight("100.0%");
		routeLayout.setMargin(true);
		routeLayout.setSpacing(true);
		
		// panelMarkerLayout
		panelMarkerLayout = buildPanelMarkerLayout();
		routeLayout.addComponent(panelMarkerLayout);
		routeLayout.setExpandRatio(panelMarkerLayout, 1.0f);
		
		// toolbarLayout
		toolbarLayout = buildToolbarLayout();
		routeLayout.addComponent(toolbarLayout);
		
		return routeLayout;
	}

	@AutoGenerated
	private Panel buildPanelMarkerLayout() {
		// common part: create layout
		panelMarkerLayout = new Panel();
		panelMarkerLayout.setImmediate(false);
		panelMarkerLayout.setWidth("100.0%");
		panelMarkerLayout.setHeight("100.0%");
		
		// verticalLayoutMarkerLayout
		verticalLayoutMarkerLayout = buildVerticalLayoutMarkerLayout();
		panelMarkerLayout.setContent(verticalLayoutMarkerLayout);
		
		return panelMarkerLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayoutMarkerLayout() {
		// common part: create layout
		verticalLayoutMarkerLayout = new VerticalLayout();
		verticalLayoutMarkerLayout.setImmediate(false);
		verticalLayoutMarkerLayout.setWidth("100.0%");
		verticalLayoutMarkerLayout.setHeight("-1px");
		verticalLayoutMarkerLayout.setMargin(false);
		
		// markerLayout
		markerLayout = new MarkerLayout();
		markerLayout.setImmediate(false);
		markerLayout.setWidth("100.0%");
		markerLayout.setHeight("100.0%");
		verticalLayoutMarkerLayout.addComponent(markerLayout);
		
		return verticalLayoutMarkerLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildToolbarLayout() {
		// common part: create layout
		toolbarLayout = new HorizontalLayout();
		toolbarLayout.setImmediate(false);
		toolbarLayout.setWidth("100.0%");
		toolbarLayout.setHeight("-1px");
		toolbarLayout.setMargin(false);
		
		// btnAddMarker
		btnAddMarker = new Button();
		btnAddMarker.setCaption("Add Marker");
		btnAddMarker.setImmediate(true);
		btnAddMarker.setWidth("-1px");
		btnAddMarker.setHeight("-1px");
		toolbarLayout.addComponent(btnAddMarker);
		
		// verticalLayout_1
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("-1px");
		verticalLayout_1.setHeight("-1px");
		verticalLayout_1.setMargin(false);
		toolbarLayout.addComponent(verticalLayout_1);
		toolbarLayout.setExpandRatio(verticalLayout_1, 1.0f);
		
		// btnMapEdit
		btnMapEdit = new Button();
		btnMapEdit.setCaption("Normal");
		btnMapEdit.setImmediate(true);
		btnMapEdit.setWidth("-1px");
		btnMapEdit.setHeight("-1px");
		toolbarLayout.addComponent(btnMapEdit);
		toolbarLayout.setComponentAlignment(btnMapEdit, new Alignment(6));
		
		// btnCalculateRoute
		btnCalculateRoute = new Button();
		btnCalculateRoute.setCaption("Calculate Route");
		btnCalculateRoute.setImmediate(true);
		btnCalculateRoute.setWidth("-1px");
		btnCalculateRoute.setHeight("-1px");
		toolbarLayout.addComponent(btnCalculateRoute);
		toolbarLayout
				.setComponentAlignment(btnCalculateRoute, new Alignment(6));
		
		return toolbarLayout;
	}

	@AutoGenerated
	private VerticalLayout buildMapLayout() {
		// common part: create layout
		mapLayout = new VerticalLayout();
		mapLayout.setImmediate(false);
		mapLayout.setWidth("100.0%");
		mapLayout.setHeight("100.0%");
		mapLayout.setMargin(true);
		
		// openLayersMap
		openLayersMap = new OpenLayersMap();
		openLayersMap.setImmediate(true);
		openLayersMap.setWidth("100.0%");
		openLayersMap.setHeight("100.0%");
		mapLayout.addComponent(openLayersMap);
		mapLayout.setExpandRatio(openLayersMap, 1.0f);
		
		return mapLayout;
	}

}
